#! /usr/bin/env bash

_get_service_port_and_ecshost_and_dockerid() {
  SERVICENAME=${1:-unknown}

  _get_ecs_private_ips >/dev/null 2>&1

  ECSHOST_AND_PORT=$(for h in ${ECS_HOST_IPS_ARRAY[*]}
  do
    if [[ ${h} != "None" ]]
    then
      PORT=$(ssh ${SSH_OPTIONS} -A -J ec2-user@${BASTION_IP} \
        ec2-user@${h} "docker ps --filter \"name=${SERVICENAME}\" --format \"{{.Ports}}\"" | \
        awk -F ':' '{print $2}' | awk -F '-' '{print $1}')
      if [[ -n ${PORT} ]]
      then
        echo "${h} ${PORT}"
        break
      fi
    fi
  done)

  ECSHOST_AND_ID=$(for h in ${ECS_HOST_IPS_ARRAY[*]}
  do
    if [[ ${h} != "None" ]]
    then
      ID=$(ssh ${SSH_OPTIONS} -A -J ec2-user@${BASTION_IP} \
        ec2-user@${h} "docker ps --filter \"name=${SERVICENAME}\" --format \"{{.ID}}\"")
      if [[ -n ${ID} ]]
      then
        echo "${h} ${ID}"
        break
      fi
    fi
  done)

  if [[ $(IFS=' '; set -f; set -- ${ECSHOST_AND_PORT}; echo $#) -eq 2 ]] && \
     [[ $(IFS=' '; set -f; set -- ${ECSHOST_AND_ID}; echo $#) -eq 2 ]]
  then
    set -- ${ECSHOST_AND_PORT} ${ECSHOST_AND_ID}
    ECSHOST=${1}
    DOCKERPORT=${2}
    DOCKERID=${4}
  else
    echo "ERROR: No container found where the name contains ${SERVICENAME}"
    exit 1
  fi
}

_tunnel_to_ecs_service() {
  SERVICENAME=${1:-unknown}
  LOCALPORT=${2:-9999}
  _get_service_port_and_ecshost_and_dockerid ${SERVICENAME}

  ssh -f -Nn -J ec2-user@${BASTION_IP} -L ${LOCALPORT}:localhost:${DOCKERPORT} ec2-user@${ECSHOST}

  if [[ $? -eq 0 ]]
  then
    echo "INFO: Tunnel to service ${SERVICENAME} is established on localhost:${LOCALPORT}"
    echo "      The tunnel is running in the background, do not forget to kill the"
    echo "      corresponding ssh process."
  else
    echo "ERROR: An error occured setting up the tunnel to service ${SERVICE}"
  fi
}

_dockerexec() {
  SERVICENAME=${1}
  CMD=${2}
  _get_service_port_and_ecshost_and_dockerid ${SERVICENAME}

  ssh -tt -J ec2-user@${BASTION_IP} ec2-user@${ECSHOST} "docker exec -ti ${DOCKERID} ${CMD}"
}

_get_bastion_ip() {
  set -- $(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*astion*" \
    --query "Reservations[*].Instances[*].[PublicIpAddress,KeyName,PrivateIpAddress]" \
    --output text)
  if [ -n "${1}" -a -n "${2}" -a -n "${3}" ]
  then
    BASTION_IP=${1}
    if [[ -n ${AWS_SSH_FORCE_SSH_KEY} ]]
    then
      SSH_KEYNAME=${AWS_SSH_FORCE_SSH_KEY}
    else
      SSH_KEYNAME=${2}
    fi
    if [[ ${SSH_KEYNAME} != /* ]]
    then
      SSH_KEYNAME=${PKH:-~/.ssh}/${SSH_KEYNAME}
    fi

    BASTION_PRIVATE_IP=${3}
  else
    echo "ERROR - Unable to find a bastion EC2 instance"
    exit 1
  fi
}

_get_ecs_private_ips() {
  ECS_HOST_IPS_1=$(aws ec2 describe-instances \
    --filters "Name=tag:ECSClusterName,Values=*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)
  ECS_HOST_IPS_2=$(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*ECS*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)

  ECS_HOST_IPS="${ECS_HOST_IPS_1} ${ECS_HOST_IPS_2}"

  ECS_HOST_IPS_ARRAY=(${ECS_HOST_IPS//None/})

  if [[ -z ${ECS_HOST_IPS} ]]
  then
    echo "ERROR - Unable to find ECS hosts"
    exit 1
  fi
}

_get_rds_endpoints() {
  RDS_ENDPOINTS=$(aws rds describe-db-instances \
    --query "DBInstances[*].Endpoint.[Address,Port]" \
    --output text)

  if [ -z ${RDS_ENDPOINTS} ]
  then
    echo "ERROR - Unable to find RDS instances"
    exit 1
  fi

}

_load_private_key() {
  ### Load the private Key
  KEYDIRNAME=$(dirname ${SSH_KEYNAME})
  KEYBASENAME=$(basename ${SSH_KEYNAME})
  if ssh-add -l | grep -q $(basename ${SSH_KEYNAME})
  then
    echo "INFO - Private key ${SSH_KEYNAME} already loaded"
  elif [[ -e ${KEYDIRNAME}/${KEYBASENAME} ]]
  then
    ssh-add ${KEYDIRNAME}/${KEYBASENAME}
  elif [[ -e ${KEYDIRNAME}/${KEYBASENAME}.pem ]]
  then
    ssh-add ${KEYDIRNAME}/${KEYBASENAME}.pem
  elif [[ -e ${KEYDIRNAME}/id_rsa_${KEYBASENAME} ]]
  then
    ssh-add ${KEYDIRNAME}/id_rsa_${KEYBASENAME}
  elif [[ -e ${KEYDIRNAME}/id_rsa_${KEYBASENAME}.pem ]]
  then
    ssh-add ${KEYDIRNAME}/id_rsa_${KEYBASENAME}.pem
  else
    echo "ERROR - Private key ${SSH_KEYNAME} not found"
    exit 1
  fi
}

typeset -a ECS_HOST_IPS_ARRAY

BASTION_IP=""
BASTION_PRIVATE_IP=""
SSH_KEYNAME=""
ECS_HOST_IPS=""
RDS_ENDPOINTS=""
SSH_OPTIONS="-oStrictHostKeyChecking=no"

case ${1} in
  bastion|ecs|rdstunnel|dockerps|ecsservicetunnel|dockerexec )
    _get_bastion_ip
    _load_private_key
    ;;
  * )
    echo "INFO - Usage:"
    echo "INFO -   ${0} bastion [command]"
    echo "INFO -   ${0} ecs [command]"
    echo "INFO -   ${0} dockerps"
    echo "INFO -   ${0} rdstunnel"
    echo "INFO -   ${0} ecsservicetunnel <service>"
    echo "INFO -   ${0} dockerexec <service>"
    echo ""
    echo "Set PRIVKEYHOME or AWS_SSH_PRIVKEYHOME envvar to tell me"
    echo "where your private keys are."
    echo "Default is ~/.ssh"
    echo "Set AWS_SSH_FORCE_SSH_KEY to override use of bastions key"
    echo "in favor of your own key (requires your pubkey to be present"
    echo "on the EC2 instances)"
    ;;
esac

[[ -n ${PRIVKEYHOME} ]] && PKH=${PRIVKEYHOME}
[[ -n ${AWS_SSH_PRIVKEYHOME} ]] && PKH=${AWS_SSH_PRIVKEYHOME}

case ${1} in
  bastion )
    echo "INFO - Log in to bastion account"
    shift
    ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} ${@}
    ;;
  ecs )
    _get_ecs_private_ips
    echo "INFO - Show commands to connect to ECS ec2 instances"
    shift
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} 'ssh ${SSH_OPTIONS} -A ${h} ${@}'"
        if [[ ${#ECS_HOST_IPS_ARRAY[@]} -eq 1 ]]
        then
          ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} ${@}"
        fi
      fi
    done
    ;;
  rdstunnel )
    echo "INFO - Show command to setup tunnel to RDS"
    _get_rds_endpoints
    set -- ${RDS_ENDPOINTS}
    while [[ ${#} -gt 1 ]]
    do
      ENDPOINT=${1}
      PORT=${2}
      shift; shift
      echo "ssh ${SSH_OPTIONS} -f -Nnt -A -L ${PORT}:${ENDPOINT}:${PORT} ec2-user@${BASTION_IP}"
    done
    ;;
  dockerps )
    echo "INFO - Show docker container info on all ECS hosts"
    _get_ecs_private_ips
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "INFO - Show docker containers on ${h}"
        ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} docker ps --format \\\"table {{.ID}}\\\t{{.Image}}\\\""
      fi
    done
    ;;
  ecsservicetunnel)
    _tunnel_to_ecs_service "${2:unknown}" "${3}"
    ;;
  dockerexec)
    _dockerexec "${2:unknown}" "${3:-/bin/bash}"
    ;;

esac
