#! /usr/bin/env bash

_get_bastion_ip() {
  set -- $(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*astion*" \
    --query "Reservations[*].Instances[*].[PublicIpAddress,KeyName,PrivateIpAddress]" \
    --output text)
  if [ -n ${1} -a -n ${2} -a -n ${3} ]
  then
    BASTION_IP=${1}
    SSH_KEYNAME=${2}
    BASTION_PRIVATE_IP=${3}
  else
    echo "ERROR - Unable to find a bastion EC2 instance"
    exit 1
  fi
}

_get_ecs_private_ips() {
  ECS_HOST_IPS_1=$(aws ec2 describe-instances \
    --filters "Name=tag:ECSClusterName,Values=*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)
  ECS_HOST_IPS_2=$(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*ECS*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)

  ECS_HOST_IPS="${ECS_HOST_IPS_1} ${ECS_HOST_IPS_2}"

  ECS_HOST_IPS_ARRAY=(${ECS_HOST_IPS//None/})

  if [[ -z ${ECS_HOST_IPS} ]]
  then
    echo "ERROR - Unable to find ECS hosts"
    exit 1
  fi
}

_get_rds_endpoints() {
  RDS_ENDPOINTS=$(aws rds describe-db-instances \
    --query "DBInstances[*].Endpoint.[Address,Port]" \
    --output text)

  if [ -z ${RDS_ENDPOINTS} ]
  then
    echo "ERROR - Unable to find RDS instances"
    exit 1
  fi

}

_load_private_key() {
  ### Load the private Key
  if ssh-add -l | grep -q ${SSH_KEYNAME}
  then
    echo "INFO - Private key ${SSH_KEYNAME} already loaded"
  elif [[ -e ${PRIVKEYHOME:-~/.ssh}/${SSH_KEYNAME} ]]
  then
    ssh-add ${PRIVKEYHOME:-~/.ssh}/${SSH_KEYNAME}
  elif [[ -e ${PRIVKEYHOME:-~/.ssh}/${SSH_KEYNAME}.pem ]]
  then
    ssh-add ${PRIVKEYHOME:-~/.ssh}/${SSH_KEYNAME}.pem
  elif [[ -e ${PRIVKEYHOME:-~/.ssh}/id_rsa_${SSH_KEYNAME} ]]
  then
    ssh-add ${PRIVKEYHOME:-~/.ssh}/id_rsa_${SSH_KEYNAME}
  elif [[ -e ${PRIVKEYHOME:-~/.ssh}/id_rsa_${SSH_KEYNAME}.pem ]]
  then
    ssh-add ${PRIVKEYHOME:-~/.ssh}/id_rsa_${SSH_KEYNAME}.pem
  else
    echo "ERROR - Private key ${PRIVKEYHOME:-~/.ssh}/${SSH_KEYNAME} not found"
    exit 1
  fi
}

typeset -a ECS_HOST_IPS_ARRAY

BASTION_IP=""
BASTION_PRIVATE_IP=""
SSH_KEYNAME=""
ECS_HOST_IPS=""
RDS_ENDPOINTS=""
SSH_OPTIONS="-oStrictHostKeyChecking=no"

case ${1} in
  bastion|ecs|rdstunnel|dockerps )
    _get_bastion_ip
    _load_private_key
    ;;
  * )
    echo "INFO - Usage:"
    echo "INFO -   ${0} bastion [command]"
    echo "INFO -   ${0} ecs [command]"
    echo "INFO -   ${0} dockerps"
    echo "INFO -   ${0} rdstunnel"
    ;;
esac

case ${1} in
  bastion )
    echo "INFO - Log in to bastion account"
    shift
    ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} ${@}
    ;;
  ecs )
    _get_ecs_private_ips
    echo "INFO - Show commands to connect to ECS ec2 instances"
    shift
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} 'ssh ${SSH_OPTIONS} -A ${h} ${@}'"
        if [[ ${#ECS_HOST_IPS_ARRAY[@]} -eq 1 ]]
        then
          ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} ${@}"
        fi
      fi
    done
    ;;
  rdstunnel )
    echo "INFO - Show command to setup tunnel to RDS"
    _get_rds_endpoints
    set -- ${RDS_ENDPOINTS}
    while [[ ${#} -gt 1 ]]
    do
      ENDPOINT=${1}
      PORT=${2}
      shift; shift
      echo "ssh ${SSH_OPTIONS} -f -Nnt -A -L ${PORT}:${ENDPOINT}:${PORT} ec2-user@${BASTION_IP}"
    done
    ;;
  dockerps )
    echo "INFO - Show docker container info on all ECS hosts"
    _get_ecs_private_ips
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "INFO - Show docker containers on ${h}"
        ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} docker ps --format \\\"table {{.ID}}\\\t{{.Image}}\\\""
      fi
    done
    ;;

esac
